cmdhistory=[";; Switching to dcu.data-tools namespace" "(load-presets \\"p0.syx\\")" ";; Switching to dcu.data-tools namespace" "(load-preset \\"p0.syx\\")" ";; Switching to dcu.data-tools namespace" "(load-preset \\"p0.syx\\")" "(load-preset \\"/Users/john/proj/dc/p0.syx\\")" "(dir)" "(pwd)" "dir" "(shell \\"pwd\\")" "(shell \\"ls\\")" "(shell \\"bach\\")" "(+ 1 23)" "(dec2str (1 2 3 4))" "(dec2str '(1 2 3 4))" "(slurp-binary \\"p0.syx\\")" "(slurp-binary \\"/Users/john/proj/dc/p0.syx\\")" "(load-preset \\"/Users/john/proj/dc/p0.syx\\")" "(load-presets \\"/Users/john/proj/dc/p0.syx\\")" "(presets*)" "presets*" "@presets*" "(dec2str @presets*)" "(dump-presets)" "(defspec test-spec\\n         \:sox \:int8\\n         \:n-all \:int16 649\\n         \:all [\:int8]\\n         )" "(defn dump-presets\\n  []\\n  (printhex @presets*))" ";; Switching to dcu.data-tools namespace" "(test-spec\\n  )" "(dump-presets\\n  )" "(spec-write test-spec @presets*)" "(read-write test-spec @presets*)" "(spec-read test-spec )" "(spec-read-bytes test-spec @presets*)" "(defspec test-spec\\n         \:sox \:int8\\n          \:all [650]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" "(defspec test-spec\\n         \:sox \:int8\\n          \:all [\:int8]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" "(defspec test-spec\\n         \:sox \:int8\\n         \:n-all 650 \\n         \:all [\:int8]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" "(defspec test-spec\\n         \:sox \:int8\\n         \:n-all \:int32 \\n         \:all [\:int8]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" "(defspec test-spec\\n         \:sox \:int8\\n         \:n-all \:int16\\n         \:all [\:int8]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" ";; Switching to dcu.data-tools namespace" "(defspec test-spec\\n         \:sox \:int8\\n         \:n-all \:int16\\n         \:all [\:int32]\\n         )" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" ";; Switching to dcu.byte-spec namespace" ";; Switching to dcu.data-tools namespace" "(spec-read-bytes test-spec @presets*)" ";; Switching to dcu.util namespace" "(get-os)" ";; Switching to dcu.util namespace" "(mac-os?)" ";; Switching to dcu.util namespace" "(mac-os?)" "(get-os)" "(classpath-seq)" "(system-user-name)" "(System/getProperty \\"os.name\\")" "(System/getProperty )" "(System/getProperty \\"os\\")" "(System/getProperty \\"os.ver\\")" "(System/getProperty \\"os.version\\")" "(load-presets \\"/Users/john/proj/dc/fp.syx\\")" ";; Switching to dcu.data-tools namespace" "(load-presets \\"/Users/john/proj/dc/fp.syx\\")" "(load-presets \\"/Users/john/proj/dc/fp105.syx\\")" "(dump-presets)" "(aget @presets* 3)" "(aget @presets* 649)" "(aget @presets* 650)" "(printhex (aget @presets* 650))" "(hex (aget @presets* 650))" "(dex2hex (aget @presets* 650))" ";; Switching to dcu.data-tools namespace" "(hex (aget @presets* 650))" "(defn hex \\n  \\"Convert a twoscomp byte to an 8bit hex string -16->\\\\\\"F0\\\\\\"\\"\\n  [val]\\n  (dex2hex val))" ";; Switching to dcu.data-tools namespace" "(hex (aget @presets* 650))" "(hex 123)" "(hex 355)" "(hex 255)" "(hex 127)" "(hex 128)" "(hex (aget @presets* 6\\n           ))" "(hex (aget @presets* 6))" "(aget @presets* 6)" "(aset @presets* 6 102)" "(def my-array (into-array Integer/TYPE [1 2 3]))" "my-array" "(aset myarray 1 10)" "(aset my-array 1 10)" "(aset @presets* 6 102)" "(dosync (aset @presets* 6 102))" "@presets* 6 102" "(def a @presets*)" "a" "(aset a 6 10)" "(defn asum [\#^floats xs] (areduce xs i ret (float 0) (+ ret (aget xs i))))" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (byte 0) (+ ret (aget xs i))))" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (long 0) (+ ret (aget xs i))))" "(cnt-sox @presets*)" "(/ (cnt-sox @presets*) 0xf0)" "0xf0" "(/ (cnt-sox @presets*) 240.0)" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (long 0) (+ ret (aget xs i))))" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (long 0) (if (\= 240 (aget xs i)) (println \\"yep\\"))))" "(cnt-sox @presets*)" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (long 0) (if (\= 240 (aget xs i)) (ret))))" "(cnt-sox @presets*)" "(defn cnt-sox [\#^bytes xs] (areduce xs i ret (long 0) (println (aget xs i))))" "(cnt-sox @presets*)" "(future (+ 1 2))" "@(future (+ 1 2))" "(future (dcu.util/delay-ms 1000))" "@(future (dcu.util/delay-ms 1000))" ";; Switching to dcu.util namespace" ";; Switching to dcu.data-tools namespace" "(use 'gloss.core)" "(+ 0 1)" ";; Switching to dcu.data-tools namespace" "(load-presets \\"p0.syx\\")" "(load-presets \\"/Users/john/proj/dc/p0.syx\\")" "(defn load-presets \\n   \\"Load the preset file into the preset buffer\\"\\n   [file-name]\\n   (let [p-data (dcu.data-tools/slurp-binary file-name)\\n         valid? true ] \\n     (reset\! presets* p-data)))" ";; Switching to dcpm.core namespace" "(version)" ";; Switching to dcu.data-tools namespace" "(defn dump-presets\\n  []\\n  (printhex @presets*))" "(defn load-presets \\n   \\"Load the preset file into the preset buffer\\"\\n   [file-name]\\n   (let [p-data (dcu.data-tools/slurp-binary file-name)\\n         valid? true ] \\n     (reset\! presets* p-data)))" "(def presets*  (atom  []))" "(in-ns 'dcu.midi-protocol)\\n(def sx-fam* (ref []))\\n(in-ns 'dcu.data-tools)" ";; Switching to dcu.midi-protocol namespace" ";; Switching to dcu.data-tools namespace" "(defn load-presets \\n   \\"Load the preset file into the preset buffer\\"\\n   [file-name]\\n   (let [p-data (dcu.data-tools/slurp-binary file-name)\\n         valid? true ] \\n     (reset\! presets* p-data)))" ";; Switching to dcu.util namespace" ";; Switching to dcu.midi-protocol namespace" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" ";; Switching to dcpm.core namespace" ";; Switching to dcu.data-tools namespace" ";; Switching to dcu.midi namespace" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" ";; Switching to dcu.midi-ctrl namespace" "(load-presets \\"p0.syx\\")" "(load-presets \\"/Users/john/proj/dc/p0.syx\\")" "(dump-presets)" "(load-presets \\"/Users/john/proj/dc/fp105syx\\")" "(load-presets \\"/Users/john/proj/dc/fp105.syx\\")" ";; Switching to dcu.data-tools namespace" "(dmp-sysex-array @presets*)" "(type @prefers)" "(dex2hex 2)" "(dex2hex -8)" "(dex2hex -60)" "(map dex2hex (-100 23 45 -16))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" "(map (fn [v] (dex2hex v)) (-100 23 45 -16))" "(map \#(dex2hex %) '(-100 23 45 -16))" "(map \#(dex2hex %) '(-100 23 45 -16 0 ))" "@prefers" "@presets*" "(load-presets \\"/Users/john/dc/fp105.syx\\")" "(load-presets \\"/Users/john/proj/dc/fp105.syx\\")" "@presets*" "(dump-sys-array @presets*)" "(dmp-array @presets*)" "(def patch-seq (dmp-array @presets*))" "patch-seq" "(printhex patch-seq)" "(take 650 patch-seq)" "(count patch-seq)" "(/ (count patch-seq) 650)" "(doc loop)" "(doc recur)" "(/ (count patch-seq) 650)" "(def p (dmp-array @presets*))" "p" "(count p )" "*1" "*3" "*2" "*e" "*ageint*" "*agent*" "(vec p)" "(defn take-ubyte\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFF (short (.get buff))))\\n\\n(defn take-ushort\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFFFF (int (.getShort buff))))\\n\\n(defn take-uint\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFFFFFFFF (long (.getInt buff))))\\n  \\n(defn take-ulong\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFFFFFFFFFFFFFFFF (bigint (.getLong buff))))" "(defn take-ubyte\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFF (short (.get buff))))" "(defn take-ushort\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFFFF (int (.getShort buff))))" ";; Switching to dcu.data-tools namespace" "(take-ubyte @presets*)" "(defn take-ushort\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFFFF (int (.getShort buff))))" "(defn take-ubyte\\n  [\#^ByteBuffer buff]\\n  (bit-and 0xFF (short (.get buff))))" "(use 'bytebuffer)" "(bin 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'bytebuffer.buff)))" ";; Switching to bytebuffer.buff namespace" "(bin 2)" "(bin \\"23\\")" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "ns" "(idbg)" "(use 'dcu.midi-ctrl)" "(in-ns 'dcpm.core)\\n(comment \\n  (defn t [] \\n    (do\\n      (init-midi \\"Port\\")\\n      (id-dev)\\n      (println (psx)))))\\n(in-ns 'dcu.midi-ctrl)" "(conj '(1 2) '(5 6))" "(conj '(1 2) 5 6)" "(concat '(1 2) 5 6)" "(join '(1 2) 5 6 )" "(comb\\n '(1 2) 5 6 )" "(doc conj)" "(in-ns 'dcu.data-tools)\\n(defn mk-pre-vec [pre-vec] (let [p-data (first pre-vec) \\n                                 r-data (second pre-vec) \\n                                 rv (vec (drop 650 r-data)) \\n                                 v (take 650 r-data)] \\n                                 (vector (cons v p-data) rv)))\\n(in-ns 'dcpm.core)" ";; Switching to dcu.data-tools namespace" "(vec p)" "(dmp-array @presets*)" ";; Switching to dcu.data-tools namespace" "(dmp-array @presets*)" ";; Switching to dcu.data-tools namespace" "(loop [x 10]\\n  (when (> x 1)\\n    (println x)\\n    (recur (- x 2))))" "(def d [-16 1 2 3 4 -9 -16 5 6 7 8 -9])" "d" "(count d)" "(loop [x d]\\n  (when (> (count x) 6)\\n    (println x)\\n    (recur (drop 6 x))))" "(loop [x d]\\n  (when (>\= (count x) 6)\\n    (println )\\n    (recur (drop 6 x))))" "(def dump-p\\n  (fn [n p-sz]\\n    (loop [preset-seq n]\\n       (if (< (count preset-seq p-sz))\\n            preset-seq\\n          (recur (drop p-sz preset-seq))\\n          ))))" "(def dump-p\\n  (fn [n p-sz]\\n    (loop [preset-seq n]\\n       (if (< (count preset-seq) p-sz)\\n            preset-seq\\n          (recur (drop p-sz preset-seq))\\n          ))))" "(count d)" "(dump-p d 6)" "(def dump-p\\n  (fn [n p-sz]\\n    (loop [preset-seq n]\\n       (if (< (count preset-seq) p-sz)\\n            (println preset-seq)\\n          (recur (drop p-sz preset-seq))\\n          ))))" "(dump-p d 6)" "(defn\\n   [n p-sz]\\n    (loop [preset-seq n]\\n       (if (< (count preset-seq) p-sz)\\n            (println preset-seq)\\n          (recur (drop p-sz preset-seq))\\n          )))" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [preset-seq n]\\n       (if (< (count preset-seq) p-sz)\\n            (println preset-seq)\\n          (recur (drop p-sz preset-seq))\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [preset-seq n]\\n       (if (\= (count preset-seq) p-sz)\\n            (println preset-seq)\\n          (recur (drop p-sz preset-seq))\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [preset-seq n]\\n       (if (>\= (count preset-seq) p-sz)            \\n          (recur (drop p-sz preset-seq))\\n          (println preset-seq)\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (>\= (count preset-seq) p-sz)            \\n          (recur (drop p-sz preset-seq))\\n          (conj result preset-seq)\\n          )))" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (>\= (count preset-seq) p-sz)            \\n          (recur (conj result preset-seq) (drop p-sz preset-seq))\\n          result\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (zero? (count preset-seq))\\n         result\\n          (recur (conj result (take p-sz preset-seq)) (drop p-sz preset-seq))\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (zero? (count preset-seq))\\n         result\\n          (recur (conj result (take p-sz preset-seq)) (drop p-sz preset-seq))\\n          )))" "(dump-p d 6)" "(defn\\n  dump-p\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (zero? (count preset-seq))\\n         result\\n          (recur (conj result (take p-sz preset-seq)) (drop p-sz preset-seq))\\n          )))" "(dmp-array @presets*)" "(count d)" "(vec p)" "(load-presets \\"/Users/john/proj/dc/fp105.syx\\")" "(dmp-array @presets*)" "(defn mk-preset-vector\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (zero? (count preset-seq))\\n         result\\n          (recur (conj result (take p-sz preset-seq)) (drop p-sz preset-seq))\\n          )))" "(mk-preset-vector (dmp-array @presets*) 650)" "(def pv (mk-preset-vector (dmp-array @presets*) 650))" "(count pv)" "(take 1 pv)" "(mk-preset-vector (vec (dmp-array @presets*)) 650)" "(def p (dmp-array @presets*))" "p" "(vec p)" "(def v (vec p))" "v" "(mk-preset-vector v 650)" "(defn mk-preset-vector\\n   [n p-sz]\\n    (loop [result [] preset-seq n]\\n       (if (zero? (count preset-seq))\\n         result\\n          (recur (conj result (vec (take p-sz preset-seq))) (drop p-sz preset-seq))\\n          )))" "(mk-preset-vector v 650)" "(def pv (mk-preset-vector v 650))" "(take 1 pv)" "(first (take 1 pv))" "(defn take-preset [n] (first (take n pv)))" "(take-preset 4)" "\\n(take-preset 4)" "\\n(printhex (take-preset 4))" "(mk-preset-vector (vec (dmp-array @presets*)) 650)" ";; Switching to dcu.data-tools namespace" "(in-ns 'dcpm.core)\\n(defn -main [ & args]\\n\\n\\t(let [[options args banner] \\n\\n\\t\\t(cli args\\n\\t\\t\\t[\\"-h\\" \\"--help\\" \\"Displays help.\\" \:default false \:flag true]\\n\\t\\t\\t[\\"-v\\" \\"--version\\" \\"Prints version.\\" \:default false \:flag true]\\n\\t\\t\\t[\\"-l\\" \\"--list-midi-ports\\" \\"Prints MIDI dev descriptions\\" \:default false \:flag true]\\n\\t\\t\\t[\\"-r\\" \\"--read-patch\\" \\"Reads the specific patch number\\"  \:default 0 \:parse-fn \#(Integer. %)]\\n\\t\\t\\t[\\"-t\\" \\"--run-test\\" \\"run specific test number\\"  \:default 0 \:parse-fn \#(Integer. %)]\\n      [\\"-e\\" \\"--restore\\" \\"Restore specified preset file\\"]\\n\\t\\t\\t[\\"-p\\" \\"--midi-port\\" \\"Use the port with the given 'partial' description\\" \:default \\"Port\\"]\\n\\t\\t\\t)]\\n      \\n\\t   (try\\n        (when (\:help options)\\n              (println banner)\\n              (System/exit 0))\\n       \\n        (when (\:version options)\\n              (println (version))\\n              (System/exit 0))\\n       \\n\\t      (when (\:list-midi-ports options)\\n              (println (pprint \\n              (map \:description \\n              (dcu.midi/midi-devices))))\\n              (System/exit 0))\\n\\n       ; Start the MIDI system\\n       (dcu.midi-ctrl/init-midi (\:midi-port options))\\n       (dcu.midi-ctrl/id-dev)\\n\\n        ( when (not\= 0  (\:run-test options) )\\n            ( let [id (\:run-test options)]\\n              (println \\"run-test\\")\\n              (dcu.midi-ctrl/prt-id)\\n              (System/exit 0)\\n              ))\\n\\n       (when (\:restore options)\\n         (let [file-name (\:restore options)]\\n         (dcu.midi-ctrl/restore-preset file-name))\\n         (System/exit 0))\\n\\n       ; Options that require the MIDI susbsystem\\n       (when (\:read-patch options)\\n         (let [id (\:read-patch options)]\\n         (dcu.midi-ctrl/print-patch id))\\n         (System/exit 0))\\n\\n        (catch Exception e\\n          (println \\"Internal Error\: \\" e )))\\n   ))\\n(in-ns 'dcu.data-tools)" ";; Switching to dcu.midi-ctrl namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(restore-presets \\"/Users/john/proj/dc/fp105.syx\\")" "(mk-preset-vector (vec (dmp-array @presets*)) 650)" "(dump-presets)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-protocol)))" ";; Switching to dcu.midi-protocol namespace" ";; Switching to dcu.data-tools namespace" ";; Switching to dcu.midi-protocol namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-protocol)))" ";; Switching to dcu.midi-protocol namespace" "(mk-command-msg 0x63 3)" "(mk-command-msg 0x63)" "(mk-command-msg 0x63 200)" "(printhex (mk-command-msg 0x63 200))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-protocol)))" ";; Switching to dcu.midi-protocol namespace" "(dc-cmds \:write-preset)" "(mk-patch-msg)" "(mk-patch-msg 34)" "(mk-command-msg \:reset-device)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(send-dc-cmd \:reset-device)" "(idbg)" "(send-dc-cmd \:reset-device)" "(get-preset 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(get-preset 3)" "(idbg)" "(get-preset 3)" "(dump-presets)" "(get-patch 2)" "(get-preset 2)" "(count @presets*)" "(printhex @presets*)" "(def p @presets*)" "(def pp @presets*)" "(def p-sets @presets*)" "(p-sets)" "p-sets" "(aset p-sets 5 0x63)" "(doc aset)" "(aset p-sets 5 99)" "(type p-sets)" "(def p-sets @presets*)" "p-sets" "(byte-array 12)" "(def testa (aset (byte-array 12) 0 12))" "(def testa (aset ^ByteArray (byte-array 12) 0 12))" "(aset-byte p-sets 5 99)" "p-sets" "(dmp-array p-sets)" "(take 10 (dmp-array p-sets))" "(take 10 (dmp-array @presets*))" "(aset ^bytes p-sets 5 99)" "(take 10 (dmp-array @presets*))" "(take 10 (dmp-array (aclone @presets*)))" "(def patch-seq (dmp-array (aclone @presets*)))" "(take 10 patch-seq)" "(defn aset-seq\\n  [idx val]\\n  (dmp-array (aset-byte (aclone @presets*)) idx val))" "(defn aset-seq\\n  [a idx val]\\n  (dmp-array (aset-byte (aclone a)) idx val))" "(in-ns 'dcu.data-tools)\\n(defn aset-seq\\n  \\"Sets the byte value at idx of the array and return a seq\\"\\n  [a idx val]\\n  (dmp-array (aset-byte (aclone a)) idx val))\\n(in-ns 'dcu.midi-ctrl)" ";; Switching to dcu.data-tools namespace" "(aset-seq @presets* 6 98)" ";; Switching to dcu.data-tools namespace" "(aset-seq @presets* 6 98)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(aset-seq @presets* 6 98)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(aset-seq @presets* 6 98)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(aset-seq @presets* 6 98)" "(nth (aset-seq @presets* 6 98) 6)" "(take 10 (aset-seq @presets* 6 98))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(get-preset 5)" "(send-dc-cmd \:reset-device)" "(send-dc-cmd \:reinit-presets)" "(idbg)" "(send-dc-cmd \:reinit-presets)" "(idbg)" "(send-dc-cmd \:reinit-presets)" "(dc-cmds \:reinit-presets)" ";; Switching to dcu.midi-ctrl namespace" "(dc-cmds \:reinit-presets)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(dc-cmds \:reinit-presets)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-protocol)))" ";; Switching to dcu.midi-protocol namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(dc-cmds \:reinit-presets)" "(idbg)" "(send-dc-cmd \:reinit-presets)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(send-dc-cmd \:reinit-presets)" "(psx)" "(idbg)" ";; Switching to dcu.midi-ctrl namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(send-dc-cmd \:reinit-presets)" "(hex 0x45)" "(hex 69)" "(send-dc-cmd \:reset-device)" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(get-preset 2)" "(dup-array @presets*)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" ";; Switching to dcu.midi-ctrl namespace" "(dup-array @presets*)" "(dmp-array @presets*)" "(defn head-preset [n] (take n (dmp-array @presets*)))" "(head-preset 10)" "(defn hhead-preset [n] (printhex (take n (dmp-array @presets*))))" "(defn phh [n] (printhex (take n (dmp-array @presets*))))" "(defn hp [n] (take n (dmp-array @presets*)))" "(hp)" "(hp 10)" "(hhp 10)" "(hhp)" "(hhp 10)" "(defn hhp [n] (dec2str (take n (dmp-array @presets*))))" "(hhp 10)" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(idbg)" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(get-preset 0)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(get-preset 1)" "(hhp 10)" "(defn gp [n] ((get-preset n) (hhp 10)))" "(gp 0)" "(defn gp [n] \\n  (do (get-preset n) (hhp 10)))" "(gp 1)" "(gp 2)" "(defn gp [n] \\n  (do (get-preset n) (hhp 8)))" "(gp 2)" "(gp 0)" "(mapcat gp (range 0 3))" "(map \\n  gp (range 0 3))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(gp 1)" "(htp 10)" "(gp 2)" "(midi-sx-send-get-bytes (dmp-array @presets*))" "(midi-sx-send-get-bytes (dmp-sysex-array @presets*))" "(dmp-sysex-array (midi-sx-send-get-bytes (dmp-sysex-array @presets*)))" "(dec2str (dmp-sysex-array (midi-sx-send-get-bytes (dmp-sysex-array @presets*))))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.data-tools)))" ";; Switching to dcu.data-tools namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'dcu.midi-ctrl)))" ";; Switching to dcu.midi-ctrl namespace" "(idbg)" "(gp 1)" "(get-preset 1)" "(hhp)" "(hhp 1)" "(hhp 9)" "(hhp 10)" "(hhp 9)" "(defn gp \\n  \\"get preset n, and return the first 8 bytes as a hext string\\"\\n  [n] \\n  (do (get-preset n) (hhp 9)))" "(defn gpp \\n  \\"get preset n, and return the first 8 bytes as a hext string\\"\\n  [n] \\n  (do (get-preset n) (hhp 9)))" "(gpp 1)" "(gpp 2)" "(aset16-byte @presets* 6 5)" "\\n(dmp-sysex-array (aset16-byte @presets* 6 5))" "\\n(take 9 (dmp-sysex-array (aset16-byte @presets* 6 5)))" "\\n(dec2str (take 9 (dmp-sysex-array (aset16-byte @presets* 6 5))))" "(aset16-byte @presets* 6 200)" "\\n(dec2str (take 9 (dmp-sysex-array (aset16-byte @presets* 6 200))))" "\\n(dec2str (take 9 (dmp-sysex-array (aset16-byte @presets* 6 1\\n                                               ))))" "(defn set-preset\\n\\t\\"Write the preset, return hex string responce\\"\\n\\t([num] \\n   (let [preset (aset16-byte @presets* 6 num)\\n         responce (dec2str (dmp-sysex-array (midi-sx-send-get-bytes (dmp-sysex-array preset))))]\\n     responce\\n    )))" "(set-preset 10)" "(ggp 10)" "(gpp 10)" "(defn gpp \\n  \\"get preset n, and return the first 8 bytes as a hext string\\"\\n  [n] \\n  (do (get-preset n) (hhp 15)))" "(gpp 10)" "(gpp 11)" "(set-preset 10)" "(gpp 10)" "(get-preset 0)" "(set-preset 0)" "(map (set-preset %) (range 0 200))" "(map \#(set-preset %) (range 0 20))" "(send-dc-cmd \:reinit-presets)"]
eclipse.preferences.version=1
